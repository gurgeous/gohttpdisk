package gohttpdisk

import (
	"bufio"
	"bytes"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"net/http/httputil"
	"strings"
	"time"
)

// HTTPDisk is a caching http transport.
type HTTPDisk struct {
	// Underlying Cache.
	Cache Cache
	// if nil, http.DefaultTransport is used.
	Transport http.RoundTripper
	Options   Options
}

// Options for creating a new HTTPDisk.
type Options struct {
	// Directory where the cache is stored. Defaults to httpdisk.
	Dir string

	// Don't read anything from cache (but still write)
	Force bool

	// Don't read errors from cache (but still write)
	ForceErrors bool

	Logger *log.Logger
}

type Status struct {
	Digest string
	Key    string
	Path   string
	Status string
	URL    string
}

const errPrefix = "err:"

// NewHTTPDisk constructs a new HTTPDisk.
func NewHTTPDisk(options Options) *HTTPDisk {
	return &HTTPDisk{Cache: *newCache(options), Options: options}
}

func (hd *HTTPDisk) Status(req *http.Request) (*Status, error) {
	cacheKey, err := NewCacheKey(req)
	if err != nil {
		return nil, err
	}

	// what is the status?
	data, _ := hd.Cache.Get(cacheKey)
	var status string
	if len(data) == 0 {
		status = "miss"
	} else if bytes.HasPrefix(data, []byte(errPrefix)) {
		status = "error"
	} else {
		status = "hit"
	}

	return &Status{
		Digest: cacheKey.Digest(),
		Key:    cacheKey.Key(),
		Path:   hd.Cache.diskpath(cacheKey),
		Status: status,
		URL:    req.URL.String(),
	}, nil
}

// RoundTrip is the entry point used by http.Client.
func (hd *HTTPDisk) RoundTrip(req *http.Request) (*http.Response, error) {
	var resp *http.Response

	transport := hd.Transport
	if transport == nil {
		transport = http.DefaultTransport
	}

	cacheKey, err := NewCacheKey(req)
	if err != nil {
		return nil, err
	}

	// Get our cached response unless Force is on, in which case we ignore cached data
	if !hd.Options.Force {
		resp, err = hd.get(cacheKey)

		// Check for cached errors
		if err != nil {
			// Return error unless ForceErrors is on
			if !hd.Options.ForceErrors {
				return nil, err
			}
		} else if resp != nil {
			// Return valid cached response
			return resp, nil
		}
	}

	// not found. make the request
	if hd.Options.Logger != nil {
		hd.Options.Logger.Printf("%s %s", req.Method, req.URL)
	}

	start := time.Now()
	resp, err = transport.RoundTrip(req)
	if err != nil {
		return nil, hd.handleError(cacheKey, err)
	}

	// cache response
	err = hd.set(cacheKey, resp, start)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

// get cached response for this request, if any
func (hd *HTTPDisk) get(cacheKey *CacheKey) (*http.Response, error) {
	// cacheKey, err := NewCacheKey(req)
	// if err != nil {
	// 	return nil, err
	// }

	data, err := hd.Cache.Get(cacheKey)
	if len(data) == 0 {
		return nil, nil
	}
	if err != nil {
		return nil, err
	}

	// is it a cached error?
	if bytes.HasPrefix(data, []byte(errPrefix)) {
		errString := string(data[len(errPrefix):])
		return nil, fmt.Errorf("%s (cached)", errString)
	}

	buf := bytes.NewBuffer(data)
	return http.ReadResponse(bufio.NewReader(buf), cacheKey.Request)
}

// set cached response
func (hd *HTTPDisk) set(cacheKey *CacheKey, resp *http.Response, start time.Time) error {
	// drain body, put back into Response
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		// errors can occur here if the server returns an invalid body. handle that
		// case and consider caching the error
		return hd.handleError(cacheKey, err)
	}
	resp.Body = ioutil.NopCloser(bytes.NewBuffer(body))
	elapsed := float64(time.Since(start)) / float64(time.Second)

	// add our headers
	resp.Header.Set("X-Gohttpdisk-Elapsed", fmt.Sprintf("%0.3f", elapsed))
	resp.Header.Set("X-Gohttpdisk-Url", cacheKey.Request.URL.String())

	// now cache bytes
	data, err := httputil.DumpResponse(resp, true)
	if err != nil {
		return err
	}
	err = hd.Cache.Set(cacheKey, data)
	if err != nil {
		return err
	}

	// restore body
	resp.Body = ioutil.NopCloser(bytes.NewBuffer(body))
	return nil
}

func (hd *HTTPDisk) handleError(cacheKey *CacheKey, err error) error {
	if isCacheableError(err) {
		err2 := hd.setError(cacheKey, err)
		if err2 != nil {
			// error while caching, give the caller a chance to see it
			err = err2
		}
	}
	return err
}

// cache an error response
func (hd *HTTPDisk) setError(cacheKey *CacheKey, err error) error {
	body := fmt.Sprintf("%s%s", errPrefix, err.Error())
	err2 := hd.Cache.Set(cacheKey, []byte(body))
	if err2 != nil {
		return err2
	}
	return nil
}

// if err.Error() contains one of these, we consider the error to be cacheable
// and we write it to disk. This list was generated by hitting the tranco top
// 1000 websites.
var cacheableErrors = []string{
	"certificate has expired",
	"certificate is valid",
	"certificate signed by unknown authority",
	"connection refused",
	"connection reset by peer",
	"context deadline exceeded",
	"EOF",
	"handshake failure",
	"i/o timeout",
	"no route to host",
	"no such host",
	"request canceled",
	"stream error",
	"tls: internal error",
	"tls: unrecognized name",
}

func isCacheableError(err error) bool {
	errorString := err.Error()
	for _, s := range cacheableErrors {
		if strings.Contains(errorString, s) {
			return true
		}
	}

	fmt.Printf("isCacheableError? type:%T v:%v\n", err, err)
	return false
}
