package gohttpdisk

import (
	"bufio"
	"bytes"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/http/httputil"
	"strings"
	"time"
)

// HTTPDisk is a caching http transport.
type HTTPDisk struct {
	// Underlying Cache.
	Cache Cache
	// if nil, http.DefaultTransport is used.
	Transport http.RoundTripper
}

// Options for creating a new HTTPDisk.
type Options struct {
	// Directory where the cache is stored. Defaults to httpdisk.
	Dir string
}

const errPrefix = "err:"

// NewHTTPDisk constructs a new HTTPDisk.
func NewHTTPDisk(options Options) *HTTPDisk {
	return &HTTPDisk{Cache: *newCache(options)}
}

// RoundTrip is the entry point used by http.Client.
func (hd *HTTPDisk) RoundTrip(req *http.Request) (*http.Response, error) {
	transport := hd.Transport
	if transport == nil {
		transport = http.DefaultTransport
	}

	// get our cached response
	resp, err := hd.get(req)
	if err != nil {
		return nil, err
	}
	if resp != nil {
		return resp, nil
	}

	// not found. make the request
	start := time.Now()
	resp, err = transport.RoundTrip(req)
	if err != nil {
		return nil, hd.handleError(req, err)
	}

	// cache response
	err = hd.set(req, resp, start)
	if err != nil {
		return nil, err
	}

	return resp, nil
}

// get cached response for this request, if any
func (hd *HTTPDisk) get(req *http.Request) (*http.Response, error) {
	data, err := hd.Cache.Get(req)
	if len(data) == 0 {
		return nil, nil
	}
	if err != nil {
		return nil, err
	}

	// is it a cached error?
	if bytes.HasPrefix(data, []byte(errPrefix)) {
		errString := string(data[len(errPrefix):])
		return nil, fmt.Errorf("%s (cached)", errString)
	}

	buf := bytes.NewBuffer(data)
	return http.ReadResponse(bufio.NewReader(buf), req)
}

// set cached response
func (hd *HTTPDisk) set(req *http.Request, resp *http.Response, start time.Time) error {
	// drain body, put back into Response
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		// errors can occur here if the server returns an invalid body. handle that
		// case and consider caching the error
		return hd.handleError(req, err)
	}
	resp.Body = ioutil.NopCloser(bytes.NewBuffer(body))
	elapsed := float64(time.Since(start)) / float64(time.Second)

	// add our headers
	resp.Header.Set("X-Gohttpdisk-Elapsed", fmt.Sprintf("%0.3f", elapsed))
	resp.Header.Set("X-Gohttpdisk-Url", req.URL.String())

	// now cache bytes
	data, err := httputil.DumpResponse(resp, true)
	if err != nil {
		return err
	}
	err = hd.Cache.Set(req, data)
	if err != nil {
		return err
	}

	// restore body
	resp.Body = ioutil.NopCloser(bytes.NewBuffer(body))
	return nil
}

func (hd *HTTPDisk) handleError(req *http.Request, err error) error {
	if isCacheableError(err) {
		err2 := hd.setError(req, err)
		if err2 != nil {
			// error while caching, give the caller a chance to see it
			err = err2
		}
	}
	return err
}

// cache an error response
func (hd *HTTPDisk) setError(req *http.Request, err error) error {
	body := fmt.Sprintf("%s%s", errPrefix, err.Error())
	err2 := hd.Cache.Set(req, []byte(body))
	if err2 != nil {
		return err2
	}
	return nil
}

// if err.Error() contains one of these, we consider the error to be cacheable
// and we write it to disk. This list was generated by hitting the tranco top
// 1000 websites.
var cacheableErrors = []string{
	"certificate has expired",
	"certificate is valid",
	"certificate signed by unknown authority",
	"connection refused",
	"connection reset by peer",
	"context deadline exceeded",
	"EOF",
	"handshake failure",
	"i/o timeout",
	"no route to host",
	"no such host",
	"request canceled",
	"stream error",
	"tls: internal error",
	"tls: unrecognized name",
}

func isCacheableError(err error) bool {
	errorString := err.Error()
	for _, s := range cacheableErrors {
		if strings.Contains(errorString, s) {
			return true
		}
	}

	fmt.Printf("isCacheableError? type:%T v:%v\n", err, err)
	return false
}
